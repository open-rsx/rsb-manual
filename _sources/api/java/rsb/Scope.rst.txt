.. java:import:: java.util ArrayList

.. java:import:: java.util List

.. java:import:: java.util.regex Pattern

Scope
=====

.. java:package:: rsb
   :noindex:

.. java:type:: public class Scope

   A scope defines a channel of the hierarchical unified bus covered by RSB. It is defined by a surface syntax like "/a/deep/scope".

   :author: jwienke

Fields
------
COMPONENT_SEPARATOR
^^^^^^^^^^^^^^^^^^^

.. java:field:: @SuppressWarnings public static final String COMPONENT_SEPARATOR
   :outertype: Scope

   The separator character used between different components of a scope, aka "/".

Constructors
------------
Scope
^^^^^

.. java:constructor:: public Scope(String stringRep)
   :outertype: Scope

   Parses a scope from a string representation.

   :param stringRep: string representation of the scope
   :throws IllegalArgumentException: if the given string does not have the right syntax

Methods
-------
concat
^^^^^^

.. java:method:: public Scope concat(Scope childScope)
   :outertype: Scope

   Creates a new scope that is a sub-scope of this one with the subordinated scope described by the given argument. E.g. "/this/is/".concat("/a/test/") results in "/this/is/a/test".

   :param childScope: child to concatenate to the current scope for forming a sub-scope
   :return: new scope instance representing the created sub-scope

equals
^^^^^^

.. java:method:: @Override public boolean equals(Object obj)
   :outertype: Scope

getComponents
^^^^^^^^^^^^^

.. java:method:: public List<String> getComponents()
   :outertype: Scope

   Returns all components of the scope as an ordered list. Components are the names between the separator character '/'. The first entry in the list is the highest level of hierarchy. The scope '/' returns an empty list.

   :return: components of the represented scope as ordered list with highest level as first entry

hashCode
^^^^^^^^

.. java:method:: @Override public int hashCode()
   :outertype: Scope

isSubScopeOf
^^^^^^^^^^^^

.. java:method:: public boolean isSubScopeOf(Scope other)
   :outertype: Scope

   Tests whether this scope is a sub-scope of the given other scope, which means that the other scope is a prefix of this scope. E.g. "/a/b/" is a sub-scope of "/a/".

   :param other: other scope to test
   :return: \ ``true``\  if this is a sub-scope of the other scope, equality gives \ ``false``\ , too

isSuperScopeOf
^^^^^^^^^^^^^^

.. java:method:: public boolean isSuperScopeOf(Scope other)
   :outertype: Scope

   Inverse operation of \ :java:ref:`isSubScopeOf(Scope)`\ .

   :param other: other scope to test
   :return: \ ``true``\  if this scope is a strict super scope of the other scope. equality also gives \ ``false``\ .

superScopes
^^^^^^^^^^^

.. java:method:: @SuppressWarnings public List<Scope> superScopes(boolean includeSelf)
   :outertype: Scope

   Generates all super scopes of this scope including the root scope "/". The returned list of scopes is ordered by hierarchy with "/" being the first entry.

   :param includeSelf: if set to \ ``true``\ , this scope is also included as last element of the returned list
   :return: list of all super scopes ordered by hierarchy, "/" being first

toString
^^^^^^^^

.. java:method:: @Override public String toString()
   :outertype: Scope

